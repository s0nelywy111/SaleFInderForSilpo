import re
from bs4 import BeautifulSoup as bs
import requests as req
import json
import os
import threading
import time
from datetime import datetime

# –î–û–ë–ê–í–ò–¢–¨ –ò–ú–ü–û–†–¢ –ë–û–¢–ê:
try:
    from telegram_bot import bot, load_tracked_products, save_tracked_products, extract_price_number
except ImportError:
    print("‚ö†Ô∏è Telegram –±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    bot = None
    
    def load_tracked_products():
        return {}
    
    def save_tracked_products(data):
        pass
    
    def extract_price_number(text):
        return None

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "/tracked_products.json"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
data = None

def load_existing_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r', encoding='utf-8') as file:
            return json.load(file)
    else:
        return {
            "products": [],
            "links": [],
            "count": 0
        }

def save_data(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
    with open(DATA_FILE, 'w', encoding='utf-8') as file:
        json.dump(data, file, ensure_ascii=False, indent=4)

def logs():
    """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–≤–∞—Ä–æ–≤"""
    global data
    if data is None:
        data = load_existing_data()
    print("üìä –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤:", data['count'])
    print("üì¶ –¢–æ–≤–∞—Ä—ã:", data['products'])

def input_link():
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä"""
    global data
    if data is None:
        data = load_existing_data()
    
    choice = input("–í—ã —Ö–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
    
    if choice in ['–Ω–µ—Ç', 'no', '–Ω', 'n']:
        if not data['products']:
            print("‚ùå –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç! –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã —Å–Ω–∞—á–∞–ª–∞.")
            return input_link()
            
        print("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:")
        for i, product in enumerate(data['products'], 1):
            print(f"{i}. {product}")
        
        try:
            # –í—ã–±–æ—Ä –ø–æ –Ω–æ–º–µ—Ä—É
            choice_num = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞: ").strip())
            if 1 <= choice_num <= len(data['products']):
                selected_index = choice_num - 1
                selected_product = data['products'][selected_index]
                selected_link = data['links'][selected_index]
                print(f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä: {selected_product}")
                return selected_link, True  # True –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ —Ç–æ–≤–∞—Ä —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞!")
                return input_link()
                
        except ValueError:
            # –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è
            search_term = input("–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞: ").strip().lower()
            matches = []
            
            for i, product in enumerate(data['products']):
                if search_term in product.lower():
                    matches.append((i, product))
            
            if not matches:
                print("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return input_link()
            elif len(matches) == 1:
                # –ù–∞–π–¥–µ–Ω –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä
                index, product = matches[0]
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä: {product}")
                return data['links'][index], True
            else:
                # –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤
                print("üîç –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤:")
                for i, (_, product) in enumerate(matches, 1):
                    print(f"{i}. {product}")
                
                try:
                    choice_num = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä: ").strip())
                    if 1 <= choice_num <= len(matches):
                        index, product = matches[choice_num - 1]
                        print(f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä: {product}")
                        return data['links'][index], True
                    else:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä!")
                        return input_link()
                except ValueError:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
                    return input_link()
    
    else:  # –¥–∞ –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –æ—Ç–≤–µ—Ç
        url = input("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä: ").strip()
        if not re.match(r'https?://', url):
            print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É.")
            return input_link()
        return url, False  # False –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ —Ç–æ–≤–∞—Ä –Ω–æ–≤—ã–π

def get_product_info(soup):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ"""
    try:
        products_name = soup.find('h1', class_='product-page__title').text.strip()
        products_link = soup.find('link', rel='canonical')['href']
        return products_name, products_link
    except AttributeError:
        print("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ")
        return None, None

def get_price_info(soup):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ –∏ –∞–∫—Ü–∏—è—Ö"""
    price_elements = soup.find('div', class_='product-page-price')
    main_price = price_elements.find('div', class_='product-page-price__old')
    sale_price = price_elements.find('div', class_='product-page-price__main')
    sale_value = price_elements.find('div', class_='product-page-price__discount')
    price_info = f"—Å–æ —Å–∫–∏–¥–∫–æ–π: {sale_price.text.strip()}\n   –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–Ω–∞: {main_price.text.strip()}\n   –°–∫–∏–¥–∫–∞: {sale_value.text.strip()}" if sale_value else f"–¶–µ–Ω–∞: {sale_price.text.strip()}"
    return price_info

def save_product_data(products_name, products_link):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ"""
    global data
    
    choice = input("–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
    
    if choice in ['–¥–∞', 'yes', '–¥', 'y']:
        if products_name not in data['products']:
            data['products'].append(products_name)
            data['links'].append(products_link)
            data['count'] += 1
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä: {products_name}")
            save_data(data)
        else:
            print(f"‚ö†Ô∏è –¢–æ–≤–∞—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {products_name}")
    else:
        print("–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

def send_notification_to_user(user_id, message_text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        bot.send_message(user_id, message_text, 
                        parse_mode='Markdown',
                        disable_web_page_preview=True)
        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

def monitor_all_users():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    while True:
        try:
            print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –≤ {datetime.now().strftime('%H:%M:%S')}")
            tracked_data = load_tracked_products()
            
            for user_id, products in tracked_data.items():
                for url, product_data in products.items():
                    try:
                        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                        headers = {
                            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                        }
                        
                        # –ó–∞–ø—Ä–æ—Å –∫ —Å–∞–π—Ç—É
                        response = req.get(url, headers=headers)
                        response.raise_for_status()
                        
                        # –ü–∞—Ä—Å–∏–Ω–≥ HTML
                        soup = bs(response.text, 'html.parser')
                        
                        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                        product_name = get_product_info(soup)
                        price_info = get_price_info(soup)
                        
                        if isinstance(price_info, dict):
                            current_price = price_info['current_price']
                            price_display = price_info['formatted']
                        else:
                            current_price = extract_price_number(str(price_info))
                            price_display = str(price_info)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
                        old_price = product_data.get('price')
                        
                        if current_price and old_price and current_price != old_price:
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ —Ñ–∞–π–ª–µ
                            tracked_data[user_id][url]['price'] = current_price
                            tracked_data[user_id][url]['price_text'] = price_info
                            save_tracked_products(tracked_data)
                            
                            if current_price < old_price:
                                # –°–ö–ò–î–ö–ê!
                                discount_percent = ((old_price - current_price) / old_price) * 100
                                notification = f"""
üî• **–°–ö–ò–î–ö–ê –ù–ê –¢–û–í–ê–†!**
üì¶ {product_name}
üí∞ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {price_display}
üìâ –°–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞ {discount_percent:.1f}%
üîó {url}
‚è∞ {datetime.now().strftime('%H:%M, %d.%m.%Y')}
                                """
                                send_notification_to_user(user_id, notification)
                                
                            elif current_price > old_price:
                                # –¶–ï–ù–ê –í–´–†–û–°–õ–ê
                                increase_percent = ((current_price - old_price) / old_price) * 100
                                notification = f"""
üìà **–¶–ï–ù–ê –í–´–†–û–°–õ–ê**
üì¶ {product_name}
üí∞ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {price_display}
üìà –†–æ—Å—Ç –Ω–∞ {increase_percent:.1f}%
üîó {url}
‚è∞ {datetime.now().strftime('%H:%M, %d.%m.%Y')}
                                """
                                send_notification_to_user(user_id, notification)
                        
                        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                        time.sleep(2)
                        
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–≤–∞—Ä–∞ {url}: {e}")
                        
            print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        
        # –ñ–¥–µ–º 30 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        time.sleep(1800)  # 30 –º–∏–Ω—É—Ç

def start_monitoring():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    monitor_thread = threading.Thread(target=monitor_all_users, daemon=True)
    monitor_thread.start()
    print("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!")

# –î–æ–±–∞–≤—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
@bot.message_handler(commands=['start_monitoring'])
def cmd_start_monitoring(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    start_monitoring()
    bot.reply_to(message, 
        "üöÄ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!**\n\n"
        "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç\n"
        "üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω\n"
        "‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∫–∏–¥–∫–∞—Ö"
    )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    global data
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    data = load_existing_data()
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏
        result = input_link()
        
        if isinstance(result, tuple):
            url, is_saved = result
        else:
            url, is_saved = result, False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
        
        # –ó–∞–ø—Ä–æ—Å –∫ —Å–∞–π—Ç—É
        response = req.get(url, headers=headers)
        soup = bs(response.text, 'html.parser')
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
        products_name, products_link = get_product_info(soup)
        
        if products_name and products_link:
            print(f"üì¶ –¢–æ–≤–∞—Ä: {products_name}")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
            price_info = get_price_info(soup)
            print(f"üí∞ –¶–µ–Ω–∞ {price_info}") 
            
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            if not is_saved:
                save_product_data(products_name, products_link)
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    start_monitoring()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot.polling()


