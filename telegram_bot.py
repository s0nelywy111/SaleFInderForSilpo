import telebot
from telebot import types
import re
from bs4 import BeautifulSoup as bs
import requests as req
import json
import os

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "your_API-TOKEN"

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

def get_product_info(soup):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ"""
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è
        selectors = [
            'h1.product-title',
            'h1[class*="product"]',
            '.product-info h1',
            'h1',
            '.product-name'
        ]
        
        for selector in selectors:
            name_element = soup.select_one(selector)
            if name_element:
                product_name = name_element.text.strip()
                if product_name and len(product_name) > 3:
                    return product_name
        
        return "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {str(e)}"

def get_price_info(soup):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–æ–∫"""
    try:
        price_info = {}
        
        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å —Ü–µ–Ω–∞–º–∏
        price_container = soup.find('div', class_='product-page-price')
        if not price_container:
            return "–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Ü–µ–Ω—ã
        price_text = price_container.text.strip()
        
        # –ò—â–µ–º —Ü–µ–Ω—ã –≤ —Ç–µ–∫—Å—Ç–µ
        prices = re.findall(r'(\d+\.?\d*)\s*–≥—Ä–Ω', price_text)
        
        # –ò—â–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏
        discount_match = re.search(r'-(\d+)\s*%', price_text)
        
        if len(prices) >= 2:
            # –ï—Å—Ç—å —Å–∫–∏–¥–∫–∞
            current_price = float(prices[0])
            old_price = float(prices[1])
            discount = discount_match.group(1) if discount_match else None
            
            price_info = {
                'current_price': current_price,
                'old_price': old_price,
                'discount_percent': discount,
                'formatted': f"{current_price} –≥—Ä–Ω (–±—ã–ª–æ {old_price} –≥—Ä–Ω, —Å–∫–∏–¥–∫–∞ -{discount}%)" if discount else f"{current_price} –≥—Ä–Ω (–±—ã–ª–æ {old_price} –≥—Ä–Ω)"
            }
        elif len(prices) == 1:
            # –ù–µ—Ç —Å–∫–∏–¥–∫–∏
            current_price = float(prices[0])
            price_info = {
                'current_price': current_price,
                'old_price': None,
                'discount_percent': None,
                'formatted': f"{current_price} –≥—Ä–Ω"
            }
        else:
            return "–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        return price_info
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {str(e)}"

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = '/tracked_products.json'

def load_tracked_products():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã"""
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r', encoding='utf-8') as file:
            return json.load(file)
    else:
        return {}

def save_tracked_products(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã"""
    os.makedirs(os.path.dirname(DATA_FILE), exist_ok=True)
    with open(DATA_FILE, 'w', encoding='utf-8') as file:
        json.dump(data, file, ensure_ascii=False, indent=4)

def extract_price_number(price_text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ü–µ–Ω—ã"""
    numbers = re.findall(r'[\d,]+\.?\d*', price_text.replace(',', '.'))
    if numbers:
        try:
            return float(numbers[0])
        except:
            return None
    return None

def create_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn_list = types.KeyboardButton("üìã –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã")
    btn_help = types.KeyboardButton("‚ùì –ü–æ–º–æ—â—å")
    btn_add = types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
    btn_check = types.KeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—ã")
    keyboard.add(btn_add, btn_list)
    keyboard.add(btn_check, btn_help)
    return keyboard

@bot.message_handler(commands=['start'])
def start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = create_main_keyboard()
    bot.reply_to(message, 
        "üõí –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω –≤ Silpo!\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä:",
        reply_markup=keyboard
    )

@bot.message_handler(func=lambda message: message.text == "üìã –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã")
def show_my_products(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    user_id = str(message.from_user.id)
    tracked_data = load_tracked_products()
    
    if user_id not in tracked_data or not tracked_data[user_id]:
        bot.reply_to(message, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
        return
    
    products = tracked_data[user_id]
    response = "üìã **–í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã:**\n\n"
    
    for i, (url, product_data) in enumerate(products.items(), 1):
        name = product_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        price_text = product_data.get('price_text', '–¶–µ–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')
        
        if isinstance(price_text, dict):
            price_display = price_text.get('formatted', '–¶–µ–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')
        else:
            price_display = price_text
            
        response += f"{i}. **{name}**\nüí∞ {price_display}\nüîó [–°—Å—ã–ª–∫–∞]({url})\n\n"
    
    bot.reply_to(message, response, parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
def request_product_link(message):
    """–ü—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É"""
    bot.reply_to(message, 
        "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å —Å–∞–π—Ç–∞ Silpo:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: https://silpo.ua/product/..."
    )

@bot.message_handler(func=lambda message: message.text == "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—ã")
def check_all_prices(message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–Ω—ã –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    user_id = str(message.from_user.id)
    tracked_data = load_tracked_products()
    
    if user_id not in tracked_data or not tracked_data[user_id]:
        bot.reply_to(message, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
        return
    
    bot.reply_to(message, "üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ü–µ–Ω—ã –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤...")
    
    for url, product_data in tracked_data[user_id].items():
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
            
            # –ó–∞–ø—Ä–æ—Å –∫ —Å–∞–π—Ç—É
            response = req.get(url, headers=headers)
            response.raise_for_status()
            
            # –ü–∞—Ä—Å–∏–Ω–≥ HTML
            soup = bs(response.text, 'html.parser')
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            product_name = get_product_info(soup)
            price_info = get_price_info(soup)
            
            if isinstance(price_info, dict):
                current_price = price_info['current_price']
                price_display = price_info['formatted']
            else:
                current_price = extract_price_number(str(price_info))
                price_display = str(price_info)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
            old_price = product_data.get('price')
            
            if current_price and old_price and current_price != old_price:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
                tracked_data[user_id][url]['price'] = current_price
                tracked_data[user_id][url]['price_text'] = price_info
                save_tracked_products(tracked_data)
                
                if current_price < old_price:
                    discount_percent = ((old_price - current_price) / old_price) * 100
                    bot.send_message(message.chat.id, 
                        f"üî• **–°–ö–ò–î–ö–ê –ù–ê –¢–û–í–ê–†!**\n"
                        f"üì¶ {product_name}\n"
                        f"üí∞ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {price_display}\n"
                        f"üìâ –°–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞ {discount_percent:.1f}%\n"
                        f"üîó {url}",
                        parse_mode='Markdown'
                    )
                elif current_price > old_price:
                    increase_percent = ((current_price - old_price) / old_price) * 100
                    bot.send_message(message.chat.id, 
                        f"üìà **–¶–ï–ù–ê –í–´–†–û–°–õ–ê**\n"
                        f"üì¶ {product_name}\n"
                        f"üí∞ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {price_display}\n"
                        f"üìà –†–æ—Å—Ç –Ω–∞ {increase_percent:.1f}%\n"
                        f"üîó {url}",
                        parse_mode='Markdown'
                    )
            else:
                # –¶–µ–Ω–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
                bot.send_message(message.chat.id, 
                    f"‚úÖ **{product_name}**\n"
                    f"üí∞ –¶–µ–Ω–∞: {price_display}\n"
                    f"üìä –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
                )
                
        except Exception as e:
            bot.send_message(message.chat.id, 
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–≤–∞—Ä–∞:\n"
                f"üîó {url}\n"
                f"‚ö†Ô∏è {str(e)}"
            )
    
    bot.reply_to(message, "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

@bot.message_handler(func=lambda message: "–ü–æ–º–æ—â—å" in message.text)
def help_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
    help_text = """
üîß **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**

‚ûï **–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä** - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
üìã **–ú–æ–∏ —Ç–æ–≤–∞—Ä—ã** - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
üîÑ **–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—ã** - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
‚ùì **–ü–æ–º–æ—â—å** - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üìù **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –ù–∞–∂–º–∏—Ç–µ "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É
2. –ë–æ—Ç –∑–∞–ø–æ–º–Ω–∏—Ç —Ç–æ–≤–∞—Ä –∏ –±—É–¥–µ—Ç —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ü–µ–Ω–æ–π
3. –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

üîó **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å—Å—ã–ª–∫–∏:** silpo.ua
üë§ Support/Developer: @Bwrbqrhrqjg
    """
    bot.reply_to(message, help_text, parse_mode='Markdown')

@bot.message_handler(func=lambda message: 'silpo.ua' in message.text)
def handle_silpo_link(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫ Silpo"""
    try:
        bot.reply_to(message, "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–æ–≤–∞—Ä...")
        
        url = message.text.strip()
        user_id = str(message.from_user.id)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
        
        # –ó–∞–ø—Ä–æ—Å –∫ —Å–∞–π—Ç—É
        response = req.get(url, headers=headers)
        response.raise_for_status()
        
        # –ü–∞—Ä—Å–∏–Ω–≥ HTML
        soup = bs(response.text, 'html.parser')
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        product_name = get_product_info(soup)
        price_info = get_price_info(soup)
        
        if isinstance(price_info, dict):
            current_price = price_info['current_price']
            price_display = price_info['formatted']
        else:
            current_price = extract_price_number(str(price_info))
            price_display = str(price_info)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        tracked_data = load_tracked_products()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if user_id not in tracked_data:
            tracked_data[user_id] = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        product_key = url
        if product_key in tracked_data[user_id]:
            old_price = tracked_data[user_id][product_key]['price']
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
            tracked_data[user_id][product_key]['price'] = current_price
            tracked_data[user_id][product_key]['price_text'] = price_info
            save_tracked_products(tracked_data)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–∏–¥–∫—É
            if current_price and old_price and current_price < old_price:
                discount_percent = ((old_price - current_price) / old_price) * 100
                bot.reply_to(message, f"üî• –°–ö–ò–î–ö–ê! –¶–µ–Ω–∞ —Å–Ω–∏–∑–∏–ª–∞—Å—å –Ω–∞ {discount_percent:.1f}%!")
            
            result_message = f"""
üì¶ **–¢–æ–≤–∞—Ä:** {product_name}
üí∞ **–¶–µ–Ω–∞:** {price_display}
üìä **–°—Ç–∞—Ç—É—Å:** –£–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è
üîó **–°—Å—ã–ª–∫–∞:** {url}
            """
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
            tracked_data[user_id][product_key] = {
                'name': product_name,
                'price': current_price,
                'price_text': price_info,
                'url': url
            }
            save_tracked_products(tracked_data)
            
            # –ú–∞—Å–∫–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
            masked_url = f"[–û—Ç–∫—Ä—ã—Ç—å —Ç–æ–≤–∞—Ä]({url})"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó —Å—Å—ã–ª–∫–∏
            result_message = f"""
üì¶ **–¢–æ–≤–∞—Ä:** {product_name}
üí∞ **–¶–µ–Ω–∞:** {price_display}
‚úÖ **–°—Ç–∞—Ç—É—Å:** –î–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
        """
        
        bot.reply_to(message, result_message, 
                    parse_mode='Markdown',
                    disable_web_page_preview=True)
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")

if __name__ == "__main__":
    from pathlib import Path
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    lock_file = Path("bot.lock")
    lock_file.touch()
    
    try:
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        bot.polling()
    finally:
        lock_file.unlink(missing_ok=True)
        print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
